<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        ">
         
    <!-- 配置包扫描位置 -->
    <context:component-scan base-package="cn.yq.ssm"/>
    
    <!-- 读取数据库文件 db.properties -->
    <context:property-placeholder location="classpath:db.properties"/>
    
    <!-- 配置连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    		<property name="driverClassName" value="${jdbc.driverClassName}"></property>
    		<property name="url" value="${jdbc.url}"></property>
    		<property name="username" value="${jdbc.username}"></property>
    		<property name="password" value="${jdbc.password}"></property>
    		<property name="maxActive" value="${jdbc.maxActive}"></property>
    </bean>
    
    <!-- 配置Sql会话工厂 -->
    <bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<!-- 注入前面的配置连接池 -->
    	<property name="dataSource" ref ="dataSource"></property>
    	
    	<!-- 配置文件映射 -->
    	<property name="mapperLocations">
    	    <array>
    	    	<value>classpath:cn/yq/ssm/mapper/*Mapper.xml</value>
    	    </array>
    	</property>
    	
    	
    	<!-- 配置别名 使用包扫描配置 -->
    	<property name="typeAliasesPackage" value="cn.yq.ssm.pojo"></property>
    	
    	
    	<!-- 配置日志 -->
    	<property name="configLocation" value="classpath:mybatis-config.xml"></property>
    	
    	
    </bean>
	<!-- 创建代理对象 -->
	<bean id="user_loginMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
			<!-- 代理接口 -->
			<property name="mapperInterface" value="cn.yq.ssm.mapper.User_loginMapper"></property>
			
			<!-- 注入配置Sql会话工厂 -->
			<property name="SqlSessionFactory" ref="SqlSessionFactory"></property>
	</bean>
	
	
	
	
	<!-- MyBatis的事务配置 -->
		
		<!-- 配置事务管理器 ： what？-->
		
		<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<!-- 注入数据源 -->
			<property name="dataSource" ref="dataSource"/>
		</bean>
		
		<!-- Spring事务配置 ： when? -->
		<tx:advice id="txAdvice" transaction-manager="transactionManager">
			<tx:attributes>
				<!-- dql操作，一般都是只读事务 -->
				<tx:method name="get*" read-only="true" propagation="REQUIRED" />
				<tx:method name="find*" read-only="true" propagation="REQUIRED" />
				<tx:method name="select*" read-only="true" propagation="REQUIRED" />
				<tx:method name="query*" read-only="true" propagation="REQUIRED" />
				<!-- dml操作，非只读事务 -->
				<tx:method name="*" read-only="false"/>
			</tx:attributes>
		</tx:advice>
		
		<!-- 配置AOP切面，将事务切到Service层 -->
		<aop:config>
			<!-- 切入点 ：where？-->
			<aop:pointcut expression="execution(* cn.yq.ssm.service.impl.*.*(..))" id="pt"/>
			<!-- 切面：切入点+通知 -->
			<aop:advisor advice-ref="txAdvice" pointcut-ref="pt"/>
		</aop:config>
	
</beans>
















